// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LabResultEntry /> component renders correctly 1`] = `
<Connect(LabResultEntry)
  clearNameEMRField={[MockFunction]}
  history={
    Object {
      "location": Object {
        "state": Object {
          "concept": Object {
            "display": "Hémogramme automatisé",
          },
          "dateActivated": "2018-08-30T17:34:19.000+0100",
          "orderNumber": "ORD-1",
          "patient": Object {
            "display": "Y2A7LR - williams willy john",
          },
          "urgency": "ROUTINE",
        },
      },
    }
  }
  labTests={
    Array [
      "Hémogramme automatisé",
    ]
  }
  location={
    Object {
      "state": Object {
        "concept": Object {
          "display": "Hémogramme automatisé",
        },
        "dateActivated": "2018-08-30T17:34:19.000+0100",
        "orderNumber": "ORD-1",
        "patient": Object {
          "display": "Y2A7LR - williams willy john",
        },
        "urgency": "ROUTINE",
      },
    }
  }
  nameField=""
  openmrs={
    Object {
      "CONSTANTS": Object {
        "labResultsDidNotPerformAnswer": "mock-uuid",
        "labResultsDidNotPerformQuestion": "mock-uuid",
        "labResultsDidNotPerformReason": "mock-uuid",
      },
    }
  }
  patientHeaderDetail={
    Object {
      "display": "Y2A7LR - williams willy john",
    }
  }
  selectedLAbConcept={
    Object {
      "setMembers": Array [
        Object {
          "display": "Height",
          "uuid": "1234-abcd",
        },
        Object {
          "display": "Weight",
          "uuid": "pqrs-5678",
        },
      ],
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <LabResultEntry
    CONSTANTS={
      Object {
        "labResultsDidNotPerformAnswer": "mock-uuid",
        "labResultsDidNotPerformQuestion": "mock-uuid",
        "labResultsDidNotPerformReason": "mock-uuid",
      }
    }
    clearNameEMRField={[MockFunction]}
    didNotPerformCheckbox={false}
    dispatch={[Function]}
    history={
      Object {
        "location": Object {
          "state": Object {
            "concept": Object {
              "display": "Hémogramme automatisé",
            },
            "dateActivated": "2018-08-30T17:34:19.000+0100",
            "orderNumber": "ORD-1",
            "patient": Object {
              "display": "Y2A7LR - williams willy john",
            },
            "urgency": "ROUTINE",
          },
        },
      }
    }
    labTests={
      Array [
        "Hémogramme automatisé",
      ]
    }
    location={
      Object {
        "state": Object {
          "concept": Object {
            "display": "Hémogramme automatisé",
          },
          "dateActivated": "2018-08-30T17:34:19.000+0100",
          "orderNumber": "ORD-1",
          "patient": Object {
            "display": "Y2A7LR - williams willy john",
          },
          "urgency": "ROUTINE",
        },
      }
    }
    nameField=""
    openmrs={
      Object {
        "CONSTANTS": Object {
          "labResultsDidNotPerformAnswer": "mock-uuid",
          "labResultsDidNotPerformQuestion": "mock-uuid",
          "labResultsDidNotPerformReason": "mock-uuid",
        },
      }
    }
    patientHeaderDetail={
      Object {
        "display": "Y2A7LR - williams willy john",
      }
    }
    selectedLAbConcept={
      Object {
        "setMembers": Array [
          Object {
            "display": "Height",
            "uuid": "1234-abcd",
          },
          Object {
            "display": "Weight",
            "uuid": "pqrs-5678",
          },
        ],
      }
    }
    selectedLabConcept={null}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <Loader>
      <div
        className="custom-loader"
      >
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
        <div />
      </div>
    </Loader>
  </LabResultEntry>
</Connect(LabResultEntry)>
`;
